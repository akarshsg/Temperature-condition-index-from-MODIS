var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[67.9775170883846, 37.41591929346025],
          [67.9775170883846, 5.848199423282182],
          [97.42087646338459, 5.848199423282182],
          [97.42087646338459, 37.41591929346025]]], null, false);

// Load the MODIS LST ImageCollection
var modis = ee.ImageCollection('MODIS/061/MOD11A2');

// Define the time range
var startYear = 2001;
var endYear = 2022;
var startDate = ee.Date.fromYMD(startYear, 1, 1);
var endDate = ee.Date.fromYMD(endYear, 12, 31);

// Filter the MODIS LST ImageCollection based on the time range
var filtered = modis.filter(ee.Filter.date(startDate, endDate));

// Select the LST Day 1km band and filter by the specified geometry
var lstCol = filtered.select('LST_Day_1km').filterBounds(geometry);

// Function to scale LST values
var scaleLst = function (image) {
  var scaled = image.divide(50);
  return scaled.copyProperties(image, ['system:index', 'system:time_start']);
};

// Apply the scaling function to the LST collection
var lstScaled = lstCol.map(scaleLst);

// Create lists for years and months
var years = ee.List.sequence(startYear, endYear);
var months = ee.List.sequence(1, 12);

// Calculate monthly mean LST in degree celicius and clip to the specified geometry
var monthlyImages = years.map(function (year) {
  return months.map(function (month) {
    var filtered = lstScaled
      .filter(ee.Filter.calendarRange(year, year, 'year'))
      .filter(ee.Filter.calendarRange(month, month, 'month'));
    var monthly = filtered.mean().subtract(273.15).clip(geometry);
    return monthly.set({ 'month': month, 'year': year });
  });
}).flatten();

// Create an ImageCollection from the monthly mean images
var monthlyCol = ee.ImageCollection.fromImages(monthlyImages);

// Print the monthly mean ImageCollection
print (monthlyCol,"Monthly Mean")

// Calculate monthly minimum LST, Create an ImageCollection and print them
var monthlyMinImages = months.map(function (month) {
  var filtered = monthlyCol.filter(ee.Filter.eq('month', month));
  var monthlyMin = filtered.min();
  return monthlyMin.set('month', month);
});

var monthlyMin = ee.ImageCollection.fromImages(monthlyMinImages);
print (monthlyMin,"Monthly Min")

// Calculate monthly maximum LST, Create an ImageCollection and print them
var monthlyMaxImages = months.map(function (month) {
  var filtered = monthlyCol.filter(ee.Filter.eq('month', month));
  var monthlyMax = filtered.max();
  return monthlyMax.set('month', month);
});

var monthlyMax = ee.ImageCollection.fromImages(monthlyMaxImages);
print (monthlyMax,"Monthly Max")

// Calculate TCI for all months and years
var tciCollection = ee.ImageCollection.fromImages(
  years.map(function (year) {
    return months.map(function (month) {
      var filtered = monthlyCol
        .filter(ee.Filter.eq('year', year))
        .filter(ee.Filter.eq('month', month));
      var currentMonthLst = ee.Image(filtered.first());

      var minLst = ee.Image(monthlyMin.filter(ee.Filter.eq('month', month)).first());
      var maxLst = ee.Image(monthlyMax.filter(ee.Filter.eq('month', month)).first());

      var image = ee.Image.cat([currentMonthLst, minLst, maxLst]).rename(['lst', 'min', 'max']);
      var tci = image.expression('100*( max-lst ) / (max - min)',
        {
          'lst': image.select('lst'),
          'min': image.select('min'),
          'max': image.select('max')
        }).rename('Tci');

      return tci.set({ 'year': year, 'month': month });
    });
  }).flatten()
);

// Print the TCI ImageCollection
print (tciCollection, 'TCI')

// Visualization parameters
var visParams = {min: -25, max: 50, palette: ['white','blue','yellow','red']}
var tciPalette = ['#a50026','#d73027','#f46d43','#fdae61',
  '#fee08b','#d9ef8b','#a6d96a','#66bd63','#1a9850','#006837'];
var tciVisParams = {min: 0, max: 100, palette: tciPalette}
Map.addLayer(monthlyMin, visParams, 'Minimum May LST', false)  
Map.addLayer(monthlyMax, visParams, 'Maximum May LST', false)
Map.addLayer(monthlyCol, visParams, 'Current May LST', false)
Map.addLayer(tciCollection, tciVisParams, 'TCI')

// Load custom library for Earth Engine Export functions
var oeel=require('users/OEEL/lib:loadAllSF')

// Export TCI ImageCollection to Google Drive
oeel.Export.ImageCollection.toDrive({
      imageCollection: tciCollection,
      folder:'Modis_LST',
      region:geometry,
      scale:1000,
      crs:'EPSG:4326',
      maxPixels:1e13,
})
